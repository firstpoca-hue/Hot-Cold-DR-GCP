name: Deploy-Nginx-Application

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  security-events: write   # for SARIF uploads

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  LOCATION: us-central1
  CLUSTER_NAME: gke-primary
  IMAGE_REPO: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/app-images
  IMAGE_TAG: ${{ github.sha }}
  IMAGE_NAME: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/app-images/nginx-simple-app:${{ github.sha }}
  svc_acc: gcp-terraform-key@hot-cold-drp.iam.gserviceaccount.com

jobs:
  # ---------------------------
  # 1️⃣ BUILD & PUSH DOCKER IMAGE
  # ---------------------------
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud and GKE auth plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'
          export_default_credentials: true

      - name: Enable GKE auth plugin
        run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Set GCP project
        run: gcloud config set project $PROJECT_ID

      - name: Enable Required APIs
        run: |
          gcloud services enable artifactregistry.googleapis.com container.googleapis.com --project "$PROJECT_ID"

      - name: Build & Push Docker Image
        run: |
          REGION_OR_MULTI=us-central1
          REGISTRY_HOST=us-central1-docker.pkg.dev
          PROJECT_ID=${{ env.PROJECT_ID }}
          REPO_NAME=app-images
          IMAGE_NAME=nginx-simple-app
          TAG=${{ github.sha }}

          # Configure Docker with Artifact Registry
          gcloud auth configure-docker "$REGISTRY_HOST" --quiet

          # Build image
          docker build -t "${REGISTRY_HOST}/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:${TAG}" -f DockerFile .

          # Push image
          docker push "${REGISTRY_HOST}/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:${TAG}"

          # Tag latest
          docker tag "${REGISTRY_HOST}/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:${TAG}" "${REGISTRY_HOST}/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:latest"
          docker push "${REGISTRY_HOST}/${PROJECT_ID}/${REPO_NAME}/${IMAGE_NAME}:latest"

  # ---------------------------
  # 2️⃣ TRIVY SCAN
  # ---------------------------
  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud and GKE auth plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'
          export_default_credentials: true

      - name: Enable GKE auth plugin
        run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Set GCP project
        run: gcloud config set project $PROJECT_ID

      - name: Enable Required APIs
        run: |
          gcloud services enable artifactregistry.googleapis.com container.googleapis.com --project "$PROJECT_ID"

      - name: Configure Docker (Artifact Registry)
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build Docker Image (for Trivy scan)
        run: |
          docker build -t "$IMAGE_REPO:$IMAGE_TAG" -t "$IMAGE_REPO:latest" -f DockerFile .

      # ---- Human-readable Trivy (artifact)
      - name: Trivy FS (artifact)
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: .
          format: table
          output: trivy-fs.txt
          exit-code: '0'
          scanners: vuln,secret,misconfig,license

      - name: Trivy Image (artifact)
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          image-ref: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}
          format: table
          output: trivy-image.txt
          exit-code: '0'
          ignore-unfixed: true
          scanners: vuln,secret,misconfig,license

      - name: Combine Trivy outputs -> trivy.output
        shell: bash
        run: |
          {
            echo "===== TRIVY FS SCAN (repo) ====="
            cat trivy-fs.txt 2>/dev/null || true
            echo
            echo "===== TRIVY IMAGE SCAN (${IMAGE_REPO}:${IMAGE_TAG}) ====="
            cat trivy-image.txt 2>/dev/null || true
          } > trivy.output

      - name: Upload Trivy artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy.output
          path: trivy.output
          if-no-files-found: warn
          retention-days: 14

      # ---- Gated Trivy: fail if HIGH/CRITICAL found (SARIF for Code Scanning)
      - name: Trivy FS (SARIF, gated)
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-fs.sarif
          exit-code: '1'
          severity: HIGH,CRITICAL
          scanners: vuln,secret,misconfig,license

      - name: Upload Trivy FS SARIF
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-fs

      - name: Trivy Image (SARIF, gated)
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}
          format: sarif
          output: trivy-image.sarif
          exit-code: '1'
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          scanners: vuln,secret,misconfig,license

      - name: Upload Trivy Image SARIF
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-image

  # ---------------------------
  # 3️⃣ DEPLOY TO GKE
  # ---------------------------
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: trivy-scan

    steps:
      - uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud and GKE auth plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'
          export_default_credentials: true

      - name: Enable GKE auth plugin
        run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Set GCP project
        run: gcloud config set project $PROJECT_ID

      - name: Grant Artifact Registry pull to GKE node SA
        shell: bash
        run: |
          set -euo pipefail
          NODE_SA="$(gcloud container clusters describe "$CLUSTER_NAME" --region "$LOCATION" --format='value(nodeConfig.serviceAccount)')"
          if [[ -z "${svc_acc}" || "${svc_acc}" == "null" ]]; then
            PROJECT_NUMBER="$(gcloud projects describe "$PROJECT_ID" --format='value(projectNumber)')"
            NODE_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
          fi
          gcloud projects add-iam-policy-binding "$PROJECT_ID" \
            --member="serviceAccount:${svc_acc}" \
            --role="roles/artifactregistry.reader" \
            --quiet
          sleep 10

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker (Artifact Registry)
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials "$CLUSTER_NAME" --region "$LOCATION" --project "$PROJECT_ID"

      - name: Deploy to GKE
        shell: bash
        run: |
          set -e
          echo "Using image: $IMAGE_NAME"
          sed -e "s|image: .*gke-docker-repo/nginx-simple-app:.*|image: $IMAGE_NAME|g" k8s-app-deployment.yaml | kubectl apply -f -
          if ! kubectl rollout status deployment/nginx-simple-app --timeout=5m; then
            echo "Rollout failed — collecting diagnostics..."
            kubectl get deploy/nginx-simple-app -o yaml || true
            kubectl get rs -l app.kubernetes.io/name=nginx-simple-app -o wide || true
            kubectl get pods -l app.kubernetes.io/name=nginx-simple-app -o wide || true
            POD="$(kubectl get pods -l app.kubernetes.io/name=nginx-simple-app -o jsonpath='{.items[-1].metadata.name}')"
            kubectl describe pod "$POD" || true
            kubectl logs "$POD" --all-containers --tail=200 || true
            kubectl get events --sort-by=.lastTimestamp | tail -n 100 || true
            exit 1
          fi

      - name: Verify running image
        run: |
          kubectl get pods -l app.kubernetes.io/name=nginx-simple-app -o jsonpath='{.items[0].spec.containers[0].image}{"\n"}'
