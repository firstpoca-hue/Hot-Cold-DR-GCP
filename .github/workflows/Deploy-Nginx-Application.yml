name: Deploy-Nginx-Application

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  LOCATION: us-central1
  CLUSTER_NAME: app-cluster-hot
  IMAGE_NAME: us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gke-docker-repo/nginx-simple-app:latest

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}

    steps:
      # 1Ô∏è‚É£ Checkout repo
      - uses: actions/checkout@v4

      # 2Ô∏è‚É£ Authenticate to GCP (sets ADC for gcloud/kubectl)
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 2.5Ô∏è‚É£ Install gcloud + GKE auth plugin (NEW)
      - name: Install gcloud and GKE auth plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'

      # 2.6Ô∏è‚É£ Enable plugin for kubectl (NEW)
      - name: Enable GKE auth plugin
        run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      # 3Ô∏è‚É£ Set GCP project
      - name: Set GCP project
        run: gcloud config set project $PROJECT_ID

      # -------------------------------
      # üõ°Ô∏è Checkov (IaC) ‚Äî non-blocking
      # -------------------------------
      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov (continue, mark as warning)
        id: checkov
        shell: bash
        continue-on-error: true
        run: |
          echo "üîç Running Checkov..."
          checkov -d . --quiet --compact > checkov.output
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "‚ö†Ô∏è Checkov found policy violations ‚Äî continuing pipeline..."
            exit 78
          else
            echo "‚úÖ Checkov passed without issues."
          fi

      - name: Upload Checkov Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov.output
          path: ${{ github.workspace }}/checkov.output

      - name: Summarize Checkov Results
        if: always()
        run: |
          echo "### üõ°Ô∏è Checkov Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Artifact: \`checkov.output\`" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Completed (review artifact for details)" >> $GITHUB_STEP_SUMMARY

      # -------------------------------------------
      # üîç Trivy (filesystem) ‚Äî pre-build, non-blocking
      # -------------------------------------------
      - name: Trivy FS Scan (continue, mark as warning)
        id: trivy-fs
        shell: bash
        continue-on-error: true
        run: |
          echo "üîç Running Trivy filesystem scan..."
          docker run --rm -v "$PWD":/scan aquasec/trivy fs --severity HIGH,CRITICAL /scan > trivy-fs.output
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "‚ö†Ô∏è Trivy FS found vulnerabilities ‚Äî continuing pipeline..."
            exit 78
          else
            echo "‚úÖ Trivy FS scan passed without critical findings."
          fi

      - name: Upload Trivy FS Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-fs.output
          path: ${{ github.workspace }}/trivy-fs.output

      - name: Summarize Trivy FS Results
        if: always()
        run: |
          echo "### üîé Trivy Filesystem Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Artifact: \`trivy-fs.output\`" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Completed (review artifact for details)" >> $GITHUB_STEP_SUMMARY

      # 4Ô∏è‚É£ Configure Docker for Artifact Registry
      - name: Configure Docker
        run: gcloud auth configure-docker us-docker.pkg.dev --quiet

      # 5Ô∏è‚É£ Build Docker image (use correct filename: DockerFile)
      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME -f DockerFile .

      # ---------------------------------------------------
      # üîç Trivy (image) ‚Äî post-build, pre-push, non-blocking
      # ---------------------------------------------------
      - name: Trivy Image Scan (continue, mark as warning)
        id: trivy-image
        shell: bash
        continue-on-error: true
        run: |
          echo "üîç Running Trivy image scan on $IMAGE_NAME..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --severity HIGH,CRITICAL "$IMAGE_NAME" > trivy-image.output
          rc=$?
          if [ $rc -ne 0 ]; then
            echo "‚ö†Ô∏è Trivy Image found vulnerabilities ‚Äî continuing pipeline..."
            exit 78
          else
            echo "‚úÖ Trivy Image scan passed without critical findings."
          fi

      - name: Upload Trivy Image Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image.output
          path: ${{ github.workspace }}/trivy-image.output

      - name: Summarize Trivy Image Results
        if: always()
        run: |
          echo "### üê≥ Trivy Image Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Image: \`$IMAGE_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- Artifact: \`trivy-image.output\`" >> $GITHUB_STEP_SUMMARY
          echo "- Status: Completed (review artifact for details)" >> $GITHUB_STEP_SUMMARY

      # 6Ô∏è‚É£ Push Docker image to Artifact Registry
      - name: Push Docker Image
        run: docker push $IMAGE_NAME

      # 7Ô∏è‚É£ Get GKE credentials (now uses the plugin)
      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials $CLUSTER_NAME --region $LOCATION --project $PROJECT_ID

      # 8Ô∏è‚É£ Deploy to GKE
      - name: Deploy to GKE
        run: |
          kubectl apply -f k8s-app-deployment.yaml
          kubectl set image deployment/nginx-simple-app nginx=$IMAGE_NAME
          kubectl rollout status deployment/nginx-simple-app
