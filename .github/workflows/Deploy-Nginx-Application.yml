name: Deploy-Nginx-Application

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  LOCATION: us-central1
  CLUSTER_NAME: app-cluster-hot
  # repo without tag
  IMAGE_REPO: us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gke-docker-repo/nginx-simple-app
  # immutable tag per commit
  IMAGE_TAG: ${{ github.sha }}
  # full image reference used for deploy
  IMAGE_NAME: us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gke-docker-repo/nginx-simple-app:${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud and GKE auth plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'
          export_default_credentials: true

      - name: Enable GKE auth plugin
        run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Set GCP project
        run: gcloud config set project $PROJECT_ID

      - name: Enable Required APIs
        run: |
          gcloud services enable artifactregistry.googleapis.com container.googleapis.com --project "$PROJECT_ID"

      # 🔐 Ensure node SA can pull from Artifact Registry (idempotent)
      - name: Grant Artifact Registry pull to GKE node SA
        id: grant-ar
        shell: bash
        run: |
          set -euo pipefail
          NODE_SA="$(gcloud container clusters describe "$CLUSTER_NAME" --region "$LOCATION" --format='value(nodeConfig.serviceAccount)')"
          if [[ -z "${NODE_SA}" || "${NODE_SA}" == "null" ]]; then
            PROJECT_NUMBER="$(gcloud projects describe "$PROJECT_ID" --format='value(projectNumber)')"
            NODE_SA="${PROJECT_NUMBER}-compute@developer.gserviceaccount.com"
          fi
          echo "NODE_SA=$NODE_SA" >> "$GITHUB_ENV"
          gcloud projects add-iam-policy-binding "$PROJECT_ID" \
            --member="serviceAccount:${NODE_SA}" \
            --role="roles/artifactregistry.reader" \
            --quiet
          sleep 10

      - name: Configure Docker (Artifact Registry)
        run: gcloud auth configure-docker us-docker.pkg.dev --quiet

      # Build with both immutable tag and 'latest' (latest is optional)
      - name: Build Docker Image
        run: |
          docker build -t "$IMAGE_REPO:$IMAGE_TAG" -t "$IMAGE_REPO:latest" -f DockerFile .

      - name: Push Docker Image
        run: |
          docker push "$IMAGE_REPO:$IMAGE_TAG"
          docker push "$IMAGE_REPO:latest"

      - name: Get GKE Credentials
        run: gcloud container clusters get-credentials "$CLUSTER_NAME" --region "$LOCATION" --project "$PROJECT_ID"

      # ✅ Apply manifest with the SHA-tag injected to avoid reverting to ':latest'
      - name: Deploy to GKE
        shell: bash
        run: |
          set -e

          echo "Using image: $IMAGE_NAME"

          # Replace the image inline and apply (doesn't modify your file on disk)
          # Assumes your deployment YAML has a single nginx container image line.
          sed -e "s|image: .*gke-docker-repo/nginx-simple-app:.*|image: $IMAGE_NAME|g" k8s-app-deployment.yaml | kubectl apply -f -

          # Wait for rollout
          if ! kubectl rollout status deployment/nginx-simple-app --timeout=5m; then
            echo "Rollout failed — collecting diagnostics..."
            kubectl get deploy/nginx-simple-app -o yaml || true
            kubectl get rs -l app.kubernetes.io/name=nginx-simple-app -o wide || true
            kubectl get pods -l app.kubernetes.io/name=nginx-simple-app -o wide || true
            POD="$(kubectl get pods -l app.kubernetes.io/name=nginx-simple-app -o jsonpath='{.items[-1].metadata.name}')"
            kubectl describe pod "$POD" || true
            kubectl logs "$POD" --all-containers --tail=200 || true
            kubectl get events --sort-by=.lastTimestamp | tail -n 100 || true
            exit 1
          fi

      # (Optional) Show the image actually running in the Pod
      - name: Verify running image
        run: |
          kubectl get pods -l app.kubernetes.io/name=nginx-simple-app -o jsonpath='{.items[0].spec.containers[0].image}{"\n"}'
