name: Deploy-Nginx-Application

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  security-events: write   # for SARIF uploads

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  LOCATION_A: us-central1           # primary region
  CLUSTER_A: app-cluster-hot        # primary cluster name
  IMAGE_REPO: us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gke-docker-repo/nginx-simple-app
  IMAGE_TAG: ${{ github.sha }}
  IMAGE_NAME: us-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gke-docker-repo/nginx-simple-app:${{ github.sha }}

jobs:
  # ---------------------------
  # 1️⃣ BUILD
  # ---------------------------
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud and GKE auth plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'
          export_default_credentials: true

      - name: Enable GKE auth plugin
        run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Set GCP project
        run: gcloud config set project "$PROJECT_ID"

      - name: Enable Required APIs
        run: |
          gcloud services enable \
            container.googleapis.com \
            artifactregistry.googleapis.com \
            --project "$PROJECT_ID"

      - name: Configure Docker (Artifact Registry)
        run: gcloud auth configure-docker us-docker.pkg.dev --quiet

      - name: Build Docker Image
        run: |
          docker build -t "$IMAGE_REPO:$IMAGE_TAG" -t "$IMAGE_REPO:latest" -f DockerFile .

  # ---------------------------
  # 2️⃣ TRIVY SCAN
  # ---------------------------
  trivy-scan:
    name: Trivy Scan
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud and GKE auth plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'
          export_default_credentials: true

      - name: Enable GKE auth plugin
        run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Set GCP project
        run: gcloud config set project "$PROJECT_ID"

      - name: Enable Required APIs
        run: |
          gcloud services enable \
            container.googleapis.com \
            artifactregistry.googleapis.com \
            --project "$PROJECT_ID"

      - name: Configure Docker (Artifact Registry)
        run: gcloud auth configure-docker us-docker.pkg.dev --quiet

      # Build image again in this job's runner so Trivy can scan it locally
      - name: Build Docker Image (for scanning)
        run: |
          docker build -t "$IMAGE_REPO:$IMAGE_TAG" -t "$IMAGE_REPO:latest" -f DockerFile .

      # ---- Human-readable Trivy (artifact)
      - name: Trivy FS (artifact)
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          scan-type: fs
          scan-ref: .
          format: table
          output: trivy-fs.txt
          exit-code: '0'
          scanners: vuln,secret,misconfig,license

      - name: Trivy Image (artifact)
        uses: aquasecurity/trivy-action@0.28.0
        continue-on-error: true
        with:
          image-ref: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}
          format: table
          output: trivy-image.txt
          exit-code: '0'
          ignore-unfixed: true
          scanners: vuln,secret,misconfig,license

      - name: Combine Trivy outputs -> trivy.output
        shell: bash
        run: |
          {
            echo "===== TRIVY FS SCAN (repo) ====="
            cat trivy-fs.txt 2>/dev/null || true
            echo
            echo "===== TRIVY IMAGE SCAN (${IMAGE_REPO}:${IMAGE_TAG}) ====="
            cat trivy-image.txt 2>/dev/null || true
          } > trivy.output

      - name: Upload Trivy artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy.output
          path: trivy.output
          if-no-files-found: warn
          retention-days: 14

      # ---- Gated Trivy: fail if HIGH/CRITICAL found (SARIF for Code Scanning)
      - name: Trivy FS (SARIF, gated)
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-fs.sarif
          exit-code: '1'
          severity: HIGH,CRITICAL
          scanners: vuln,secret,misconfig,license

      - name: Upload Trivy FS SARIF
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif
          category: trivy-fs

      - name: Trivy Image (SARIF, gated)
        continue-on-error: true
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}
          format: sarif
          output: trivy-image.sarif
          exit-code: '1'
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          scanners: vuln,secret,misconfig,license

      - name: Upload Trivy Image SARIF
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif
          category: trivy-image

  # ---------------------------
  # ⏸️ MANUAL APPROVAL GATE
  # ---------------------------
  approval:
    name: Await Manual Approval
    runs-on: ubuntu-latest
    needs: trivy-scan
    environment:
      name: prod-approval
    steps:
      - run: echo "Pending manual approval in environment 'prod-approval'."

  # ---------------------------
  # 3️⃣ DEPLOY (single HOT cluster)
  # ---------------------------
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: approval

    steps:
      - uses: actions/checkout@v4

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud and GKE auth plugin
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'
          export_default_credentials: true

      - name: Enable GKE auth plugin
        run: echo "USE_GKE_GCLOUD_AUTH_PLUGIN=True" >> $GITHUB_ENV

      - name: Set GCP project
        run: gcloud config set project "$PROJECT_ID"

      - name: Enable Required APIs
        run: |
          gcloud services enable \
            container.googleapis.com \
            artifactregistry.googleapis.com \
            --project "$PROJECT_ID"

      - name: Configure Docker (Artifact Registry)
        run: gcloud auth configure-docker us-docker.pkg.dev --quiet

      - name: Build & Push Image
        run: |
          docker build -t "$IMAGE_REPO:$IMAGE_TAG" -t "$IMAGE_REPO:latest" -f DockerFile .
          docker push "$IMAGE_REPO:$IMAGE_TAG"
          docker push "$IMAGE_REPO:latest"

      # ---------- Deploy workloads to HOT Cluster A ----------
      - name: Get credentials (Cluster A)
        run: gcloud container clusters get-credentials "$CLUSTER_A" --region "$LOCATION_A" --project "$PROJECT_ID"

      - name: Deploy to Cluster A (GCE Ingress)
        shell: bash
        run: |
          set -e
          # Your single-cluster manifest should include Deployment + BackendConfig + Service(NEG) + Ingress
          # Ensure BackendConfig TTLs are integers (e.g., defaultTtl: 3600, maxTtl: 86400)
          sed -e "s|image: .*gke-docker-repo/nginx-simple-app:.*|image: $IMAGE_NAME|g" k8s-app-deployment.yaml | kubectl apply -f -
          if ! kubectl rollout status deployment/nginx-simple-app --timeout=5m; then
            echo "Rollout failed — collecting diagnostics..."
            kubectl get deploy/nginx-simple-app -o yaml || true
            kubectl get rs -l app.kubernetes.io/name=nginx-simple-app -o wide || true
            kubectl get pods -l app.kubernetes.io/name=nginx-simple-app -o wide || true
            POD="$(kubectl get pods -l app.kubernetes.io/name=nginx-simple-app -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || true)"
            [ -n "$POD" ] && kubectl describe pod "$POD" || true
            [ -n "$POD" ] && kubectl logs "$POD" --all-containers --tail=200 || true
            kubectl get events --sort-by=.lastTimestamp | tail -n 100 || true
            exit 1
          fi

      - name: Show Ingress address
        run: |
          kubectl get ingress -A
          echo "Visit the ADDRESS of your Ingress (http/https)."
