name: Provision-HOT(primary)-Infra
 
on:
  workflow_dispatch:
    inputs:
      force_apply:
        description: "Force apply even if plan artifact is missing or no changes detected"
        required: false
        type: boolean
        default: false
 
env:
  TF_IN_AUTOMATION: "true"
  WORKING_DIR: root
  TFVARS_PATH: ../env/dev/terraform.tfvars
 
jobs:
 
  # -------------------------------
  # 1Ô∏è‚É£ Terraform Init
  # -------------------------------
  init:
    name: Terraform Init
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
 
      # GCP Authentication
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
 
      # Terraform Init
      - name: Terraform Init
        run: terraform init -reconfigure
 
      # Upload .terraform folder for next jobs (optional)
      - name: Upload .terraform folder
        uses: actions/upload-artifact@v4
        with:
          name: terraform-initialized
          path: .terraform
 
 
  # -------------------------------
  # 2Ô∏è‚É£ Security Scan (Checkov + Trivy)
  # -------------------------------
  security:
    name: Security Scan (Checkov + Trivy)
    runs-on: ubuntu-latest
    needs: init
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
 
      # Install Checkov
      - name: Install Checkov
        run: pip install checkov
 
      # Run Checkov scan
      - name: Run Checkov
        run: |
          echo "üîç Running Checkov security scan..."
          checkov -d . --quiet --compact
 
      # Run Trivy scan
      - name: Run Trivy
        run: |
          echo "üîç Running Trivy vulnerability scan..."
          docker run --rm -v $PWD:/scan aquasec/trivy fs --exit-code 1 --severity HIGH,CRITICAL /scan
 
 
  # -------------------------------
  # 3Ô∏è‚É£ Terraform Plan
  # -------------------------------
  plan:
    name: Terraform Plan
    needs: [init, security]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    outputs:
      has_changes: ${{ steps.plan.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
 
      # Authenticate to GCP
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
 
      # Terraform Init
      - name: Terraform Init
        run: terraform init -reconfigure
 
      # Terraform Plan
      - name: Terraform Plan
        id: plan
        shell: bash
        run: |
          set -o pipefail
          set +e  # allow non-zero exit (2 = "changes present")
          terraform validate
          terraform plan \
            -var-file="${{ env.TFVARS_PATH }}" \
            -input=false -no-color -out=tfplan.bin -detailed-exitcode | tee plan.txt
          code=$?
          set -e
 
          if [ $code -eq 0 ]; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          elif [ $code -eq 2 ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "Plan failed. See plan.txt"
            exit $code
          fi
 
      # Upload plan output only if changes exist
      - name: Upload Plan Artifact
        if: ${{ steps.plan.outputs.has_changes == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: |
            tfplan.bin
            plan.txt
 
 
  # -------------------------------
  # 4Ô∏è‚É£ Terraform Apply
  # -------------------------------
  apply:
    name: Terraform Apply
    needs: plan
    if: ${{ inputs.force_apply || needs.plan.outputs.has_changes == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
 
      # GCP Authentication
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
 
      # Terraform Init
      - name: Terraform Init
        run: terraform init -reconfigure
 
      # Download Plan
      - name: Download Plan Artifact
        if: ${{ needs.plan.outputs.has_changes == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .
 
      # Apply from saved plan (if changes exist)
      - name: Terraform Apply (from plan)
        if: ${{ needs.plan.outputs.has_changes == 'true' }}
        run: terraform apply -input=false -auto-approve tfplan.bin
 
      # Forced apply (if user requested)
      - name: Terraform Apply (forced)
        if: ${{ inputs.force_apply && needs.plan.outputs.has_changes != 'true' }}
        run: terraform apply -input=false -auto-approve -var-file="${{ env.TFVARS_PATH }}"