name: Provision-HOT(primary)-Infra

on:
  workflow_dispatch:
    inputs:
      force_apply:
        description: "Force apply even if plan artifact is missing or no changes detected"
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write
  pull-requests: write

env:
  TF_IN_AUTOMATION: "true"
  WORKING_DIR: root
  TFVARS_PATH: ../env/dev/terraform.tfvars

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    outputs:
      has_changes: ${{ steps.plan.outputs.has_changes }}

    steps:
      # -------------------------------
      # 1️⃣ Initialization
      # -------------------------------
      - name: Initialization
        run: |
          echo "Step: Checkout and Setup"
          git clone ${{ github.repository_url }} .
          
          echo "Step: Google Cloud Authentication"
          gcloud auth activate-service-account --key-file="${{ secrets.GCP_SA_KEY }}"
          
          echo "Step: Read project_id from tfvars"
          PROJECT_ID=$(grep -E '^\s*project_id\s*=' "${{ env.TFVARS_PATH }}" | sed -E 's/.*=\s*"([^"]+)".*/\1/')
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
          
          echo "Step: Enable core Google APIs"
          gcloud services enable cloudresourcemanager.googleapis.com serviceusage.googleapis.com --project $PROJECT_ID
          
          echo "Step: Terraform Init"
          terraform init -reconfigure

      # -------------------------------
      # 2️⃣ Security Scans
      # -------------------------------
      - name: Security Scans
        run: |
          echo "Installing Checkov"
          pip install checkov
          echo "Running Checkov scan"
          checkov -d . --quiet --compact
          
          echo "Running Trivy scan"
          docker run --rm -v $PWD:/scan aquasec/trivy fs --exit-code 1 --severity HIGH,CRITICAL /scan

      # -------------------------------
      # 3️⃣ Terraform Plan
      # -------------------------------
      - name: Terraform Plan
        id: plan
        run: |
          set -o pipefail
          terraform validate
          terraform plan -var-file="${{ env.TFVARS_PATH }}" -input=false -no-color -out=tfplan.bin -detailed-exitcode | tee plan.txt
          code=$?
          if [ $code -eq 0 ]; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          elif [ $code -eq 2 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "Terraform plan failed"
            exit $code

      # -------------------------------
      # 4️⃣ Upload Plan Artifact
      # -------------------------------
      - name: Upload Plan Artifact
        if: ${{ steps.plan.outputs.has_changes == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: |
            tfplan.bin
            plan.txt

      # -------------------------------
      # 5️⃣ Terraform Apply
      # -------------------------------
      - name: Terraform Apply
        run: |
          echo "Downloading plan artifact if exists"
          gh actions download-artifact tfplan --dir .
          
          if [ ! -f tfplan.bin ] || [ "${{ github.event.inputs.force_apply }}" == "true" ]; then
            echo "Recreating plan because artifact missing or force_apply=true"
            terraform plan -var-file="${{ env.TFVARS_PATH }}" -input=false -no-color -out=tfplan.bin
          fi

          echo "Applying Terraform changes"
          terraform apply -input=false -auto-approve tfplan.bin
