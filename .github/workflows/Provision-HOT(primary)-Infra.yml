name: Provision-HOT(primary)-Infra
 
on:
  workflow_dispatch:
    inputs:
      force_apply:
        description: "Force apply even if plan artifact is missing or no changes detected"
        required: false
        type: boolean
        default: false
 
env:
  TF_IN_AUTOMATION: "true"
  WORKING_DIR: root
  TFVARS_PATH: ../env/dev/terraform.tfvars
  # Tell Terraform where to cache providers
  TF_PLUGIN_CACHE_DIR: ${{ runner.temp }}/terraform-plugin-cache
 
jobs:
  # -------------------------------
  # 1️⃣ Terraform Init
  # -------------------------------
  init:
    name: Terraform Init
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
 
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
 
      # Cache provider plugins
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-plugins-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-plugins-${{ runner.os }}-
 
      # Cache downloaded modules (safe to cache just this subfolder)
      - name: Cache Terraform modules
        uses: actions/cache@v4
        with:
          path: .terraform/modules
          key: terraform-modules-${{ runner.os }}-${{ hashFiles('**/versions.tf', '**/providers.tf', '**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-modules-${{ runner.os }}-
 
      - name: Terraform Init
        run: terraform init -reconfigure
 
  # -------------------------------
  # 2️⃣ Terraform Plan
  # -------------------------------
  plan:
    name: Terraform Plan
    needs: init
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    outputs:
      has_changes: ${{ steps.plan.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
 
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
 
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-plugins-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-plugins-${{ runner.os }}-
 
      - name: Cache Terraform modules
        uses: actions/cache@v4
        with:
          path: .terraform/modules
          key: terraform-modules-${{ runner.os }}-${{ hashFiles('**/versions.tf', '**/providers.tf', '**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-modules-${{ runner.os }}-
 
      - name: Terraform Init
        run: terraform init -reconfigure
 
      - name: Terraform Plan
        id: plan
        shell: bash
        run: |
          set -o pipefail
          set +e
          terraform validate
          terraform plan \
            -var-file="${{ env.TFVARS_PATH }}" \
            -input=false -no-color -out=tfplan.bin -detailed-exitcode | tee plan.txt
          code=$?
          set -e
 
          if [ $code -eq 0 ]; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          elif [ $code -eq 2 ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "Plan failed. See plan.txt"
            exit $code
          fi
 
      - name: Upload Plan Artifact
        if: ${{ steps.plan.outputs.has_changes == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: |
            tfplan.bin
            plan.txt
 
  # -------------------------------
  # 3️⃣ Terraform Apply
  # -------------------------------
  apply:
    name: Terraform Apply
    needs: plan
    if: ${{ inputs.force_apply || needs.plan.outputs.has_changes == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3
 
      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
 
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: terraform-plugins-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-plugins-${{ runner.os }}-
 
      - name: Cache Terraform modules
        uses: actions/cache@v4
        with:
          path: .terraform/modules
          key: terraform-modules-${{ runner.os }}-${{ hashFiles('**/versions.tf', '**/providers.tf', '**/.terraform.lock.hcl') }}
          restore-keys: |
            terraform-modules-${{ runner.os }}-
 
      - name: Terraform Init
        run: terraform init -reconfigure
 
      - name: Download Plan Artifact
        if: ${{ needs.plan.outputs.has_changes == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .
 
      - name: Terraform Apply (from plan)
        if: ${{ needs.plan.outputs.has_changes == 'true' }}
        run: terraform apply -input=false -auto-approve tfplan.bin
 
      - name: Terraform Apply (forced w/o plan)
        if: ${{ inputs.force_apply && needs.plan.outputs.has_changes != 'true' }}
        run: terraform apply -input=false -auto-approve -var-file="${{ env.TFVARS_PATH }}