name: Provision-HOT(primary)-Infra

on:
  workflow_dispatch:
    inputs:
      force_apply:
        description: "Force apply even if plan artifact is missing or no changes detected"
        required: false
        type: boolean
        default: false

env:
  TF_IN_AUTOMATION: "true"
  WORKING_DIR: root
  TFVARS_PATH: ../env/dev/terraform.tfvars

jobs:

  # -------------------------------
  # 1Ô∏è‚É£ Terraform Init
  # -------------------------------
  init:
    name: Terraform Init
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Upload .terraform folder
        uses: actions/upload-artifact@v4
        with:
          name: terraform-initialized
          path: .terraform


  # -------------------------------
  # 2Ô∏è‚É£ Checkov Scan
  # -------------------------------
  checkov-scan:
    name: üõ°Ô∏è Checkov Scan
    runs-on: ubuntu-latest
    needs: init
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov (continue but mark as warning)
        id: checkov
        run: |
          echo "üîç Running Checkov..."
          checkov -d . --quiet --compact > checkov.output
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "Checkov found issues. Marking job as warning..."
            exit 78
          fi

      - name: Upload Checkov Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov.output
          path: ${{ env.WORKING_DIR }}/checkov.output

      - name: Summarize Checkov Results
        if: always()
        run: |
          echo "### üõ°Ô∏è Checkov Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Completed with potential policy violations (review checkov.output artifact)" >> $GITHUB_STEP_SUMMARY


  # -------------------------------
  # 3Ô∏è‚É£ Trivy Scan
  # -------------------------------
  trivy-scan:
    name: üîç Trivy Scan
    runs-on: ubuntu-latest
    needs: init
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy (continue but mark as warning)
        id: trivy
        run: |
          echo "üîç Running Trivy..."
          docker run --rm -v $PWD:/scan aquasec/trivy fs --severity HIGH,CRITICAL /scan > trivy.output
          exit_code=$?
          if [ $exit_code -ne 0 ]; then
            echo "Trivy found vulnerabilities. Marking job as warning..."
            exit 78
          fi

      - name: Upload Trivy Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy.output
          path: ${{ env.WORKING_DIR }}/trivy.output

      - name: Summarize Trivy Results
        if: always()
        run: |
          echo "### üîç Trivy Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è Completed with potential vulnerabilities (review trivy.output artifact)" >> $GITHUB_STEP_SUMMARY


  # -------------------------------
  # 4Ô∏è‚É£ Terraform Plan
  # -------------------------------
  plan:
    name: Terraform Plan
    needs: [init, checkov-scan, trivy-scan]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    outputs:
      has_changes: ${{ steps.plan.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Terraform Plan
        id: plan
        shell: bash
        run: |
          set -o pipefail
          set +e
          terraform validate
          terraform plan \
            -var-file="${{ env.TFVARS_PATH }}" \
            -input=false -no-color -out=tfplan.bin -detailed-exitcode | tee plan.txt
          code=$?
          set -e

          if [ $code -eq 0 ]; then
            echo "has_changes=false" >> "$GITHUB_OUTPUT"
          elif [ $code -eq 2 ]; then
            echo "has_changes=true" >> "$GITHUB_OUTPUT"
          else
            echo "Plan failed. See plan.txt"
            exit $code
          fi

      - name: Upload Plan Artifact
        if: ${{ steps.plan.outputs.has_changes == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: |
            tfplan.bin
            plan.txt


  # -------------------------------
  # 5Ô∏è‚É£ Terraform Apply
  # -------------------------------
  apply:
    name: Terraform Apply
    needs: plan
    if: ${{ inputs.force_apply || needs.plan.outputs.has_changes == 'true' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Google Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Download Plan Artifact
        if: ${{ needs.plan.outputs.has_changes == 'true' }}
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: .

      - name: Terraform Apply (from plan)
        if: ${{ needs.plan.outputs.has_changes == 'true' }}
        run: terraform apply -input=false -auto-approve tfplan.bin

      - name: Terraform Apply (forced)
        if: ${{ inputs.force_apply && needs.plan.outputs.has_changes != 'true' }}
        run: terraform apply -input=false -auto-approve -var-file="${{ env.TFVARS_PATH }}"
